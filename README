/////////////////////////////////////////////////////////////////
//
// Personuppgifter (namn, pnr, epost) på dem som gjort labben
//


/////////////////////////////////////////////////////////////////
//
// 1.1
//
// vad betyder \$* i en makefile? 

    Det är en "automatic variable" som används i implicita regler.

// vad gör -Wall och -g ?

    -Wall aktiverar alla typer av varningar.
    -g aktiverar debug kompilering, debug information kompileras in i binären
    och gör att man får bättre information i gdb tex.

/////////////////////////////////////////////////////////////////
//
// 1.2 a)
// 
// int powerof(int x, int y) {
//     int res = 1;
//     for (int i = 0; i < y; i++); {
//         res *= x;
//     }
//     return res;
// }
// 
// int main() {
//     int x = 10;
//     int y = 3;
// 
//     int res = powerof(x, y);
// 
//     std::cout << x << " upphöjt till " << y << " är " << res << std::endl;
// 
//     float z = 0.29;
//     int w = (int) (z * x * x);
//     if (z * x * x == 29)
//         std::cout << z << "*" << x * x << " är 29" << std::endl;
//     else
//         std::cout << z << "*" << x * x << " är inte 29" << std::endl;           
// }
// 
// Varför blir värdet på variabeln w inte det man tror (0.29*100)? 

    0.29 kan inte lagras exakt som en float utan blir 0.289999992.
    Sedan blir det avrundat neråt när man castar det till en int.


// Hur många varv körs for-loopen i funktionen powerof? 

    for-loopen har bara ett tomt statement (ett ;) och det körs y gånger.
    Koden efter som ser ut att tillhöra loopen, loopas inte och körs en enda
    gång.


// 1.2 b)
//
// int must_follow_a(char * start, int length, char a, char b) {
//     int nr = 0;
//     for (int i = 0; i < length; i++, ++start) {
//         if (*start == a && *(start + 1) == b) // maintainers note: DANGER!
//             nr += 1;
//     }
//     return nr;
// }
// 
// Dina tre testfall

    // Checks string with a repeated pattern with two characters.
    void test_b_repeated_twice( void )
    {
        char vek[] = {'a', 'b', 'a', 'b', 'x'};
        int result = must_follow_a(vek, 4, 'a', 'b');
        TS_ASSERT_EQUALS(result, 2);
    }
    
    // Checks off-by-one problem with length.
    void test_c_length_off_by_one( void )
    {
        char vek[] = {'b', 'b', 'a', 'b', 'b'};
        int result = must_follow_a(vek, 3, 'a', 'b');
        TS_ASSERT_EQUALS(result, 0);
    }
    
    // Tests with an empty vector.
    void test_d_( void )
    {
        char vek[] = {};
        int result = must_follow_a(vek, 0, 'a', 'b');
        TS_ASSERT_EQUALS(result, 0);
    }

// Varför är det så viktigt att testa randvillkoren?

    För att minnet utanför vektorer är odefinerat. Om man skickar in en hel
    vektor och funktionen läser utanför den kan man få olika resultat med
    olika kompilatorer eller under körningarna. Det är inte säkert att man
    upptäcker problemet då, och det kan vara svårt att felsöka.


/////////////////////////////////////////////////////////////////
//
// 1.3 
// 
// Bifoga källkoden till din version av A.cpp

    #include <iostream>

    class A {
    public:
        A() 
            {std::cout << "The default contructor" << std::endl; }
        A(const A & ref) 
            {std::cout << "The copy contructor" << std::endl; }
        ~A() 
            {std::cout << "The destructor" << std::endl; }
        A(char * s) 
            {std::cout << "Some other constructor " << s << std::endl;}
        A & operator=(const A & s) 
            {std::cout << "The assignment operator" << std::endl; 
             return *this;}
    };

    #define DEBUG(s) std::cout << "--- " << s << std::endl

    void no_ref(A a) { DEBUG("inside no_ref"); }
    void with_ref(const A & a) { DEBUG("inside with_ref"); }

    int main()
    {
        DEBUG("1. constructor with arg");
        A a("my name is a");
        
        DEBUG("2. assignment to new variable");
        A b = a;         // vad är skillnaden
        
        DEBUG("3. copy construction");
        A c(a);          // mellan dessa
        
        DEBUG("4. uninitialized variable");
        A d;             // tre tekniker?
        
        DEBUG("5. assignment to variable");
        d = a;

        DEBUG("--------");
        
        DEBUG("6. call by value");
        no_ref(a);       // Bildas temporära objekt?
        
        DEBUG("7. call by reference");
        with_ref(a);     // Bildas temporära objekt?

        DEBUG("---------");
        
        DEBUG("8. Allocate vector, put in A*");
        A *aa = new A[5];
        
        DEBUG("9. Free A* that points to A[]");
        delete aa;       // Vad kommer att hända?
        
        DEBUG("done!");
        return 0;
    }


// Vad skriver ditt program ut, var förberedd att förklara varför. 

    valgrind --tool=memcheck --leak-check=yes ./A.out
    ==28301== Memcheck, a memory error detector
    ==28301== Copyright (C) 2002-2010, and GNU GPL'd, by Julian Seward et al.
    ==28301== Using Valgrind-3.6.1 and LibVEX; rerun with -h for copyright info
    ==28301== Command: ./A.out
    ==28301== 
    --- 1. constructor with arg
    Some other constructor my name is a
    --- 2. assignment to new variable
    The copy contructor
    --- 3. copy construction
    The copy contructor
    --- 4. uninitialized variable
    The default contructor
    --- 5. assignment to variable
    The assignment operator
    --- --------
    --- 6. call by value
    The copy contructor
    --- inside no_ref
    The destructor
    --- 7. call by reference
    --- inside with_ref
    --- ---------
    --- 8. Allocate vector, put in A*
    The default contructor
    The default contructor
    The default contructor
    The default contructor
    The default contructor
    --- 9. Free A* that points to A[]
    The destructor
    ==28301== Invalid free() / delete / delete[]
    ==28301==    at 0x4023EAC: operator delete(void*) (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
    ==28301==    by 0x8048B66: main (A.cpp:54)
    ==28301==  Address 0x42d002c is 4 bytes inside a block of size 9 alloc'd
    ==28301==    at 0x4024604: operator new[](unsigned int) (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
    ==28301==    by 0x8048ADF: main (A.cpp:51)
    ==28301== 
    --- done!
    The destructor
    The destructor
    The destructor
    The destructor
    ==28301== 
    ==28301== HEAP SUMMARY:
    ==28301==     in use at exit: 9 bytes in 1 blocks
    ==28301==   total heap usage: 1 allocs, 1 frees, 9 bytes allocated
    ==28301== 
    ==28301== 9 bytes in 1 blocks are definitely lost in loss record 1 of 1
    ==28301==    at 0x4024604: operator new[](unsigned int) (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
    ==28301==    by 0x8048ADF: main (A.cpp:51)
    ==28301== 
    ==28301== LEAK SUMMARY:
    ==28301==    definitely lost: 9 bytes in 1 blocks
    ==28301==    indirectly lost: 0 bytes in 0 blocks
    ==28301==      possibly lost: 0 bytes in 0 blocks
    ==28301==    still reachable: 0 bytes in 0 blocks
    ==28301==         suppressed: 0 bytes in 0 blocks
    ==28301== 
    ==28301== For counts of detected and suppressed errors, rerun with: -v
    ==28301== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 17 from 6)



// När frigörs objekten?  

    När de går out of scope eller när de frigörs explicit. Det händer i:
        - i slutet av no_ref
        - när aa frigörs med delete (dock frigörs den på ett felaktigt sätt)
        - i slutet av main. då frigörs a,b,c,d

// När skapas temporära objekt?

    När man skickar eller tilldelar dem som värde (by value).

//   A b = a;         // vad är skillnaden
//   A c(a);          // mellan dessa
//   A d;             // tre tekniker?

    1. Kopiering. Copy-konstruktorn anropas
    2. Fungerar likadant som kopiering, pga att anropet passar på
       copy-konstruktorn.
    3. Default-konstruktorn anropas.


//   no_ref(a);       // Bildas temporära objekt?

    Ja, a skickas som en värdeparameter.

//   with_ref(a);     // Bildas temporära objekt?

    Nej, a skickas som en referensparameter.

//   delete aa;       // Vad kommer att hända

    Denna kod försöker frigöra det A-objekt som aa pekar på. Men aa pekar på
    en vektor av flera A-objekt, så det är odefinierat. I detta fall så verkar
    det bli en minnesläcka.


/////////////////////////////////////////////////////////////////
//
// struct Data {
//     int x, y, z;
// };  
// 
// Data ** foo(Data ** v, int x) {
//     for (int i = 0; i < x; i++)
//         //if (v[i] != 0)
//             v[i] = new Data;
//     return v;
// }
// 
// int main () {
//     const int size = 5;
//     Data ** v = new Data * [size];
//     Data ** p = foo(v, size);
//     delete [] p;
// }

// Hur ser valgrinds felmeddelande ut?  

    ==28568== Conditional jump or move depends on uninitialised value(s)
    ==28568==    at 0x80484B1: foo(Data**, int) (Data.cpp:7)
    ==28568==    by 0x804851A: main (Data.cpp:15)

// Blir det någon skillnad i hur mycket minne som läcker när man
// kommenterar if-satsen?

    Ja, den läcker "indirekt" mer minne genom Data-objekten som läggs i p,
    som inte frigörs.

// Borde det ha blivit någon skillnad?

    Det beror på vilka värden elementen i vektorn får när man kör programmet.
    I vårt fall verkade det som de initierades till 0, så det allokerades fler
    objekt som inte frigjordes.

// Varför läcker programmet fortfarande minne?

    Vektorn frigörs, men pekare har ingen destruktor så innehållet i vektorn
    (dvs Data-objekten) frigörs inte.


/////////////////////////////////////////////////////////////////
//
// 1.4
//
// Generellt är det ofta en god idé att låta konstruktorer som
// tar ett argument deklareras som explicit. Varför? Ange ett
// exempel där det annars kan bli dumt.


    För att undvika att konstruktorn anropas implicit för en
    typkonvertering, vilket man kan råka göra av misstag. T.ex:
    
        class StringBuffer {
            public:
                StringBuffer();
                StringBuffer(int length);
                StringBuffer(char *data);
        }
        
        void display_data(StringBuffer & buffer);
        
        display_data(5);  // översätts till display_data(StringBuffer(5));
    

// operatorn[] måste vara en konstant medlemsfunktion i vissa
// fall. När och varför? Hur kopierar man vektorn?

    a) När man vill läsa element i en konstant vektor. Då måste alla metoder
       som anropas vara const (även operatorer). Anledningen är att konstanta
       objekt inte ska kunna ändras.
    b) Man kan kopiera vektorn genom tilldelning: Vector copy = old;
       Kan också göras med rekursion om man skickar en vektor som en
       värdeparameter.

